#include "Hamming.h"

//constructor -- just set the value of G
Hamming74::Hamming74()
{
	G = { {0,1,1,1}, {1,0,1,1}. {1,1,0,1}, {1,0,0,0}, {0,1,0,0}, {0,0,1,0}, {0,0,0,1} };
}

/*
	Function: encode
	Take in a 4-bit data vector and output a (7,4) Hamming code word.
	Simply multiplies data by the 4x7 generator matrix, G, and returns the result.
*/
u8 Hamming74::encode(u8 data)
{
	u8 tmp[4] = {0,0,0,0}; 
	
	for(int j = 0; j < 4; ++j) //j corresponds to the column of the result (and also the columns of G)
		for(int k = 0; k < 4; ++k) //k is our summation variable, used for the columns of data and rows of G
			tmp[j] |=  ((data & (1 << k)) & G[k][j]); //extract bit of interest from data and modulo 2 multiply it with G[k][j].
			
	return retval;
}

u8 Hamming74::decode(u8 codeword)
{
	return 0; //@TODO
}
